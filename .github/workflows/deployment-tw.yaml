name:  Application deployment to TW AWS

on:
  deployment:

env:
  tf_version: 0.12.29
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  check-environment:
    runs-on: ubuntu-latest
    if: ${{ 'tw-dev' == github.event.deployment.environment || 'tw-staging' == github.event.deployment.environment }}
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      full-environment: ${{ steps.set-environment.outputs.full-environment }}
    steps:
      - name: Set Environment
        id: set-environment
        uses: actions/github-script@v3
        with:
          script: |
            const environment = context.payload.deployment.environment.split("-")[1];
            const envMap = { 'dev': 'development', 'staging': 'staging', 'prod': 'production' };
            let fullEnvironment = envMap[environment];
            core.setOutput('environment', environment);
            core.setOutput('full-environment', fullEnvironment);

  create-base-infrastructure:
    runs-on: ubuntu-latest
    needs: [check-environment]
    env:
      tf_working_dir: './cd/base-infrastructure'
    steps:
      - uses: actions/checkout@v2
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '-backend-config="../${{ needs.check-environment.outputs.full-environment }}-backend.hcl"'
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS: '-out=base-${{ github.sha }}.tfplan -var-file="${{ needs.check-environment.outputs.full-environment }}.tfvars"'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"base-${{ github.sha }}.tfplan"'

  create-database:
    runs-on: ubuntu-latest
    needs: [check-environment, create-base-infrastructure]
    env:
      tf_working_dir: './cd/application-database'
    steps:
      - uses: actions/checkout@v2
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '-backend-config="../${{ needs.check-environment.outputs.full-environment }}-backend.hcl"'
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS: '-out=database-${{ github.sha }}.tfplan -var-file="${{ needs.check-environment.outputs.full-environment }}.tfvars"'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"database-${{ github.sha }}.tfplan"'

  create-app-infrastructure:
    runs-on: ubuntu-latest
    needs: [check-environment, create-database]
    env:
      tf_working_dir: './cd/application-infrastructure'
    steps:
      - uses: actions/checkout@v2
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '-backend-config="../${{ needs.check-environment.outputs.full-environment }}-backend.hcl"'
      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
        env:
          TF_CLI_ARGS: '-out=application-${{ github.sha }}.tfplan -var-file="${{ needs.check-environment.outputs.full-environment }}.tfvars"'
      - name: 'Terraform Apply'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '"application-${{ github.sha }}.tfplan"'

  run-migrations:
    runs-on: ubuntu-latest
    needs: [check-environment, create-app-infrastructure]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render migration task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ needs.check-environment.outputs.environment }}/${{ needs.check-environment.outputs.environment }}-db-migrations-task-definition.json
          container-name: notification-api-db-migrations
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.event.deployment.ref }}

      - name: Register migration task definition
        id: register
        run: |
          echo "::set-output name=arn::$(aws ecs register-task-definition --cli-input-json file://${{ steps.render.outputs.task-definition}} | jq -r '.taskDefinition.taskDefinitionArn')"

      - name: Run migration task
        run: |
          bash ./scripts/run_ci_migrations.sh -c ${{ needs.check-environment.outputs.environment }}-notification-cluster -e ${{ needs.check-environment.outputs.environment }} -t ${{ steps.register.outputs.arn }}

  deploy-api:
    runs-on: ubuntu-latest
    needs: [check-environment, run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render API task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ needs.check-environment.outputs.environment }}/${{ needs.check-environment.outputs.environment }}-api-task-definition.json
          container-name: notification-api
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.event.deployment.ref }}

      - name: Deploy API task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: ${{ needs.check-environment.outputs.environment }}-notification-api-service
          cluster: ${{ needs.check-environment.outputs.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery:
    runs-on: ubuntu-latest
    needs: [check-environment, run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render celery task definition
        id: render-celery-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ needs.check-environment.outputs.environment }}/${{ needs.check-environment.outputs.environment }}-celery-task-definition.json
          container-name: notification-celery
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.event.deployment.ref }}

      - name: Deploy celery task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-celery-container.outputs.task-definition }}
          service: ${{ needs.check-environment.outputs.environment }}-notification-celery-service
          cluster: ${{ needs.check-environment.outputs.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery-beat:
    runs-on: ubuntu-latest
    needs: [check-environment, run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Render celery beat task definition
        id: render-celery-beat-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ needs.check-environment.outputs.environment }}/${{ needs.check-environment.outputs.environment }}-celery-beat-task-definition.json
          container-name: notification-celery-beat
          image: 437518843863.dkr.ecr.us-east-2.amazonaws.com/notification_api:${{ github.event.deployment.ref }}

      - name: Deploy celery beat task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-celery-beat-container.outputs.task-definition }}
          service: ${{ needs.check-environment.outputs.environment }}-notification-celery-beat-service
          cluster: ${{ needs.check-environment.outputs.environment }}-notification-cluster
          wait-for-service-stability: true
  
  smoke-test:
    runs-on: ubuntu-latest
    needs: [check-environment, deploy-api, deploy-celery, deploy-celery-beat]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Get API URL
        id: get-url
        run: |
          echo "::set-output name=notification-api::$(aws ssm get-parameter --name /${{ needs.check-environment.outputs.environment }}/notification-api/api-host-name | jq '.Parameter.Value' -r)"
      - name: Run Smoke Test
        run: |
          npm install -g newman
          newman run scripts/postman/notification-api.postman_collection.json --folder "smoke-test" --env-var "notification-api-url=${{ steps.get-url.outputs.notification-api }}" --env-var "expected-git-sha=${{ github.sha }}"

  user-flows:
    runs-on: ubuntu-latest
    needs: [check-environment, smoke-test]
    if: ${{ needs.check-environment.outputs.environment == 'dev' }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::437518843863:role/notification-deploy-role
          role-skip-session-tagging: true
          role-duration-seconds: 900
      - uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Retrieve URL
        run: |
          echo "::set-env name=notification_url::$(aws ssm get-parameter --name /${{ needs.check-environment.outputs.environment }}/notification-api/api-host-name | jq '.Parameter.Value' -r)"
      - name: Retrieve Notification Secret
        run: |
          NOTIFICATION_SECRET=$(aws ssm get-parameter --with-decryption --name /${{ needs.check-environment.outputs.environment }}/notification-api/admin-client-secret | jq '.Parameter.Value' -r)
          echo "::add-mask::$NOTIFICATION_SECRET"
          echo "::set-env name=NOTIFICATION_SECRET::$NOTIFICATION_SECRET"
      - name: Run User Flow
        run: |
          docker-compose -f ci/docker-compose-user-flow.yml up --build --abort-on-container-exit --force-recreate user-flow

  deployment-status:
    runs-on: ubuntu-latest
    needs: [create-base-infrastructure, create-database, create-app-infrastructure, run-migrations, deploy-api, deploy-celery, deploy-celery-beat, smoke-test, user-flows]
    if: always()
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_ACCESS_TOKEN}}
          previews: 'flash-preview,ant-man-preview'
          script: |
            const needs = ${{ toJson(needs) }};
            let deploymentState = Object.entries(needs).reduce((state, jobEntry) => {
              const [job, value] = jobEntry;
              if (state === "failure" || value.result === "failure") return "failure";
              if (state === "error" || value.result === "cancelled") return "error";
              if (value.result === "skipped") return state;
              return state;
            }, "success");
            if (['tw-dev', 'tw-staging'].includes(context.payload.deployment.environment)) {
              github.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment.id,
                state: deploymentState,
                auto_inactive: true,
                log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}/checks`,
                environment: "${{ github.event.deployment.environment }}"
              });
            }