version: "3"
services:
  datadog:
    build:
      context: ..
      dockerfile: ci/Dockerfile.datadog
    image: datadog_agent
    environment:
      - DD_API_KEY
      - DD_SITE
      - DD_TAGS='env:dd101-dev2'
      - DD_HOSTNAME='dd101-dev-host2'
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS={"my.custom.label.team":"team"}
    volumes:
      - "../:/app:ro"
        #the following volumes mount the files on the host filesystem into the container. This gives the Agent the ability to query the Docker Daemon for data about the Docker environment, as well as process data from the host itself.
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
  app:
    build:
      context: ..
      dockerfile: ci/Dockerfile.local
    image: notification_api
    volumes:
      - "../:/app:ro"
    ports:
      - 6011:6011
    env_file:
      - .docker-env
    depends_on:
      - migrations
      - localstack
  db:
    image: postgres:11
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=LocalPassword
      - POSTGRES_DB=notification_api
  migrations:
    image: notification_api
    env_file:
      - .docker-env
    volumes:
      - "../:/app:ro"
    command: ["bash", "-c", "flask db upgrade"]
    depends_on:
      - db
  localstack:
    image: localstack/localstack
    container_name: localstack
    ports:
      - "4566:4566"
    env_file:
      - .docker-env
    environment:
      - SERVICES=ec2,iam,lambda,s3,ses,sqs,sts
      - DEFAULT_REGION=us-east-2
      - DATA_DIR=/tmp/localstack/data
      - START_WEB=0
      - HOSTNAME_EXTERNAL=localstack
    volumes:
      - './localstack_setup.sh:/docker-entrypoint-initaws.d/setup.sh'
  celery:
    image: notification_api
    env_file:
      - .docker-env
    volumes:
      - "../:/app:ro"
    command: >
      sh -c "/app/scripts/wait_for_it.sh localstack:4566 --timeout=30 -- /app/scripts/run_celery.sh"
    depends_on:
      - app
      - localstack
      - mountebank
    healthcheck:
      test: ["CMD", "sh", "-c", "/app/scripts/check_celery.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
  mountebank:
    container_name: mountebank
    image: bbyars/mountebank:2.4.0
    volumes:
      - ../scripts/mountebank:/mountebank
    ports:
      - 2525:2525
      - 7005:7005
      - 7006:7006
      - 7007:7007
      - 7008:7008
    command: start --configfile /mountebank/imposters.ejs --allowInjection
  redis:
    image: redis
    ports:
      - "6379:6379"


